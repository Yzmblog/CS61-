A： 最大收获：递归思想 python树、链表


1、解决递归无法使用变量记录问题：将变量作为参数传入函数
未解决：cats projects // problem unsolved
不懂：迭代器，可迭代参数
    生成新分支(改值)： {function（b） for b in branches（t）}
2.抽象数据视为整体
3.静态变量：nonlocal   可用于跟踪位置（类似指针）
4、nonlocal 在函数里的函数定义内声明函数的参数可以，在外面不行？ 现在内嵌函数外声明 再声明nonlocal python有+= 没有 ++
5、'{0} to {1}'.format(-8, 16) ： 结果：-8 to 16
6、list： a=b 为浅拷贝
7、生成器 ： yeild 迭代器：iter（） 遍历：next（）
8、 遍历树： for+递归 for遍历树枝
9、while 循环内 word自动遍历table？
10、nonlocal 与 global ： nonlocal 只能用于嵌套函数  global用于任何地方
11、__str__ and __repr__
12、树递归的抽象理解
13、 interpretor：read：lexer（分析器）+parser（解释器）
                 evaluation：eval + apply
                 print
B：
编译器作用：
1、执行前检查错误
2、加速 实际运行的是二进制文件（.0bj/.class（java）），代码编译而成

git：不要仓内有仓  （文件会呈灰色 打不开）（可用子模块）

step into :进入函数内
step over:跳过函数具体实现
resume:下一次执行到这里
step out：跳出函数
右键可conditional：设置debug条件
3、new 中 用递归避免改destructive
4、数组建立时用变量？？
5、null 难改， .rest可 （destructive）
6、8bits ： -128 - 127
7、双向链表：prev； next; item; 双向 ； sentinel;
   数组：两个指针：nextFirst， nextLast 
   两个结构都可用圆环理解;
8、extends与implements的不同
@CSDN
    1、在类的声明中，通过关键字extends来创建一个类的子类。

    一个类通过关键字implements声明自己使用一个或者多个接口。 

    extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法; 

    implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用 

    2、extends是继承父类，只要那个类不是声明为final或者那个类定义为abstract的就能继承

    JAVA中不支持多重继承，但是可以用接口 来实现，这样就要用到implements，继承只能继承一个类，

    但implements可以实现多个接口，用逗号分开就行了 比如 ：

    class A extends B implements C,D,E

    接口实现的注意点：  

    a.实现一个接口就是要实现该接口的所有的方法(抽象类除外)。 

    b.接口中的方法都是抽象的。  

    c.多个无关的类可以实现同一个接口，一个类可以实现多个无关的接口。


    与Extends的不同 
      extends， 可以实现父类，也可以调用父类初始化 this.parent()。而且会覆盖父类定义的变量或者函数。这样的好处是：架构师定义好接口，让工程师实现就可以了。整个项目开发效率和开发成本大大降低。    implements，实现父类，子类不可以覆盖父类的方法或者变量。即使子类定义与父类相同的变量或者函数，也会被父类取代掉。  
      这两种实现的具体使用，是要看项目的实际情况，需要实现，不可以修改implements，只定义接口需要具体实现，或者可以被修改扩展性好，用extends。
  
  9、dynamic and static type:
    every object has a static type (defined at compile-time) and a dynamic type (defined at run-time)
    (执行顺序？)
    
 10、R(N)∈Θ(N2)

11、DisjointSet:
从n 到 logn 路径压缩，存size，root。

12、RingBuffer ： Ring 环形结构

13 B-tree: 设置一个最大item值L，超过这个值就spliting   更加块 O（logN） 
